//Binary Search
//find mid(1 + (x-1)/2) => (left + (right-1)/2)
//(mid^2<=x)&&((mid+1)^2>x) 

class Solution {
public:
    int mySqrt(int x) {
    if (x == 0 || x == 1) return x; 

    int left = 1, right = x, ans = 0;
    while (left <= right) {
        long long mid = left + (right - left) / 2; 
        if (mid * mid == x) {
            return mid;
        } else if (mid * mid < x) {
            ans = mid;  
            left = mid + 1; 
        } else {
            right = mid - 1; 
        }
    }
    return ans;
    }
};

// Time Complexity: O(log x)
// Space Complexity: O(1)